[{"id":"6ff25304366cbef72174e3c9a2bdc051","title":"重航两江校园网同时登录两台手机或电脑","content":"关于校园网　　重航两江校区这边的话，联通校园卡给的宽带是限制了一部手机和一台电脑同时使用。根据需求有时候需要两台手机或者两台电脑使用的话就相当的麻烦了一点都不人性化，在琢磨出这个办法之前一直都是借用同学暂时不用的认证位置，或者用其中一台认证过的设备开热点给需要的设备使用。而且校园卡的校园流量给的每个月好几大百G根本用不完。\n　　经过我豆腐渣🧠的极限思考，揣摩大半天终于是大概明白了咱们校园网认证页面的部分真相：首先，认证系统是通过设备的Mac地址来辨别尝试上网的设备是否是已经允许上网。其次，由于校园网认证是网页认证，所以认证过程中由用户的浏览器提供的User-Agent来区分认证的设备是手机还是电脑。\nMac地址　　网络中每台设备都有一个唯一的网络标识，这个地址叫MAC地址或网卡地址，MAC地址也叫物理地址、硬件地址，由网络设备制造商生产时烧录在网卡中的，路由器根据MAC地址分配IP地址。说白了，就像是你的手机或者电脑在网络中的身份证一样，认证系统就靠这玩意来识别上网的设备到底是不是交过钱的。　　一般来说，MAC地址是没办法修改的，不过貌似目前80%的手机在联网选项里面都有个随机MAC的选项，说是为了安全考虑添加的选项来着，如果开了随机MAC的话，每一次MAC发生改变就都需要再重新认证一次校园网，所以我推荐关掉这个。　　我依稀记得小时候爸妈在路由器上设置了禁止我的手机上网的功能，就是根据MAC地址选择的我的手机，被我用手机上的联发科工程模式修改MAC地址给绕过了。欲望是学习的第一动力！\nUser-Agent　　如果你留心注意过各大软件的网站在手机上浏览和在电脑上浏览的区别的话，就能明白网页应该是根据什么东西检测到用户使用的是什么设备。比如QQ音乐的移动端网页和PC端网页。而这个东西就是User Agent，简称UA。[一些网站常常通过判断 UA 来给不同的操作系统、不同的浏览器发送不同的页面，因此可能造成某些页面无法在某个浏览器中正常显示，但通过伪装 UA 可以绕过检测。]: https://baike.baidu.com/item/%E7%94%A8%E6%88%B7%E4%BB%A3%E7%90%86\t“用户代理”\n　　校园网认证的方式为网页认证，那么检测设备类型就靠浏览器的UA来实现，而且只检测这一次 应该是吧 ，在登录的同时将设备类型和当前认证设备的MAC地址绑定在一起丢在用户自助服务系统的我的设备列表里。\n开始操作下面以一个账号认证两台电脑为例\n\n拿一台电脑先连接上校园网并直接认证，这一台就是正常作为PC设备认证上网的。\n另外一台电脑再连接上校园网，若自动弹出认证界面，就先关掉。\n打开浏览器（以edge浏览器为例），按下Ctrl+Shift+I弹出开发者工具。\n再按下Ctrl+Shift+P弹出运行面板，在运行面板中输入网络条件并回车。\n在网络条件选单中找到用户代理选项，把用户浏览器默认的勾去掉。\n选择自定义，并在框中填写一个手机的UA，比如：Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Mobile Safari/537.36 \n不要关闭开发者工具，直接在浏览器上输入10.200.4.200进入认证页面，并直接输入学号以及密码进行认证。\n提示认证成功后检查是否为两台电脑能够同时使用网络，或者进入用户自助服务系统中的我的设备中显示的MAC地址是不是你自己的两个设备\n\n","slug":"6ff25304366cbef72174e3c9a2bdc051","date":"2024-04-22T16:52:12.000Z","categories_index":"网络","tags_index":"网络","author_index":"Nexaris"},{"id":"05077cf2c12b17104d7a64cc6bea21c9","title":"Proteus8.8和Keil的安装过程","content":"单片机课上需要用到Proteus，Keil两款软件。Proteus用于绘制原理图以及仿真模拟，Keil用于编写单片机使用的程序，下面记录了这两款软件的安装过程\n\n\n\n\n\n\n\nWARNING\n注意：文章中使用的并非Windows系统，这篇安装过程中可能出现和Windows不同的界面或者路径，但步骤都是一样的\n\n安装Keil需要准备以下两个文件：\n\nc51v959.exe为Keil的安装包，keygen.exe为破解工具。\n安装步骤\n双击打开c51v959.exe，弹出安装对话框。\n点击Next进入到了条款界面，勾选上I agree to all the terms of the preceding License Agreement。\n继续点击Next进入安装路径界面，路径随意，但最好不要有中文\n点击Next，这次进入了客户信息填写界面，因为我们本来就要用破解的，所以这里4个输入框随便填写\n再次点击Next，安装就开始了。\n待进度条读完之后取消这两个选框并点击Finish\n\n\n破解激活Keil此时，桌面上应该已经出现了Keil的桌面图标，鼠标右键点击它选择以管理员身份运行。\n在Keil主界面左上角，点击File，再点击License Management，并复制在新弹出来的窗口右上角的CID（Computer ID）（如果不能 右键&gt;复制 的话，就鼠标长按并拖动全部选中再按键盘 Ctrl+C）\n\n复制之后运行破解软件keygen.exe，将刚刚复制的CID输入到对应的位置，然后其它内容不要更改，直接点击Generate，就能看到新生成的激活码。将激活码复制下来\n\n回到刚才Keil中License Management的对话框中，在New License ID Code (LIC)中粘贴，并点击Add LIC，然后点击Close关闭对话框。\n\nKeil的安装就到此为止\n此后运行Keil应该是不需要再使用管理员身份运行了，直接打开即可\n\n\n安装Proteus 8.8需要准备的文件如下：Crack  Translations  proteus8.8.SP1.exe\n\n安装步骤\n双击打开proteus8.8.SP1.exe\n\n\n\n(如果你直接弹出英文安装向导就看下一条)  点击下一步，再点下一步如果需要你安装什么组件就选是  \n\n\n\n(大部分情况应该没有上一条的步骤)   待进度条读完，弹出英文的安装界面\n\n\n\n点击Next进入条款界面，直接勾选I accept the terms of this agreement\n\n\n\n点击Next，选择Use a locally installed license key\n\n\n\n点击Next，会提示No Licence Key found for Proteus Click Next to install one.不用管\n\n\n\n点击Next，这个时候会新弹出来一个对话框，这是用来选择并安装本地证书的\n\n\n\n点击左下角Browse For Key File，会弹出来一个选择证书文件的对话框，找到一开始准备好的Crack文件夹，选中Crack文件夹中的Licence.lxk，并点击打开\n\n\n\n这个时候就能看到证书管理窗口中左边已经有东西了\n\n\n\n点击并选中All Design Tools，再点击下方的Install，弹出来的确认对话框中选择是\n\n\n\n证书管理窗口左边也出现东西之后就可以点击Close关闭该窗口了\n\n\n\n关闭之后，安装向导会给出三个选项，这里都不勾选直接点击Next\n\n\n\n然后提示你选择Typical还是Custom，Typical是默认安装，软件会装在C盘，Custom会让你自己选择路径。这里直接选择Typical\n\n\n\n等待读条结束后先不要点击Run Proteus 8 Professional或打开Proteus。这里直接点击Close关闭安装向导\n\n\n\n运行破解程序\n找到一开始准备的Crack文件夹，将其中的Patch.exe复制\n\n打开Proteus的安装目录，并将刚复制的Patch.exe粘贴在这里。如果你在上面安装的过程中选择的是Typical安装，那么路径应该为C:\\Program Files (x86)\\Labcenter Electronics\\Proteus 8 Professional\\\n\n\n鼠标右键点击Proteus安装目录下的Patch.exe文件，并选择以管理员身份运行，应该不会有什么反应，建议运行几次   这简直是玄学\n\n\n应用汉化翻译\n找到一开始准备的Translations文件夹，复制这个文件夹\n\n打开Proteus的安装目录，直接粘贴，若提示是否合并或者替换，选择 是 即可\n\n\n\n此时Proteus8.8就算安装成功了，双击桌面图标开始使用（自己在电脑上安装的Proteus8.8不用以管理员身份运行）\n","slug":"05077cf2c12b17104d7a64cc6bea21c9","date":"2024-04-14T00:25:46.000Z","categories_index":"课程","tags_index":"单片机,软件","author_index":"Nexaris"},{"id":"448097c5389b3ecf3581bba55a8a5ad6","title":"单片机Keil编程基础及实例","content":"单片机课程中除了需要画出原理图，还要根据自己的目的给单片机编写程序。\n由于Keil是纯英文界面，不是特别友好，下面记录一些基础使用方法\n新建工程Keil窗口左上，点击Project - New uVision Project\n\n然后会弹出保存路径的对话框，任意填写即可\n\n\n\n\n\n\nTIP\n路径推荐设置为和你的Protetus工程一样的路径，这样在之后编译出来的程序就在Proteus工程目录\\Objects\\中\n\n\n\n选择好路径之后需要选择一个设备，根据你在Proteus使用的单片机型号来选择，这里选的是AT89C51\n\n这里点击OK之后会再次弹出一个Yes或者No的对话框，选 是 就行。\n\n此时左边的目录栏应该已经有东西了，点击Target 1左边的加号按钮来展开。\n再鼠标右键点击Source Group 1，选择Add new item to Group &#39;Source Group 1&#39;\n\n然后会弹出来一个创建文件的对话框，这里选择C语言，名称随意。\n\n最后点击Add，就会有输入代码的界面了\n勾选生成Hex文件功能在开始之前，需要勾选一个功能，否则代码写完不会编译成.hex文件，也就没办法导入到Proteus运行。\n点击那个类似魔术棒的按钮之后，在弹出来的窗口点击Output，然后勾选Create Hex File\n\n开始编写使用的编程语言为C语言，主要内容都和标准的C语言写法一样。\n单片机程序中会用到while循环语句，if条件语句等等相对特殊的语句，你可能会需要先对这两个做一个基本的了解\n\nif条件语句if意为“如果”，else意为“否则”。很简单，粗略解释if条件语句就是：如果XXX条件符合，那么执行YYY，否则执行ZZZ\n在代码中如下表示：\ncif (XXX) &#123;\n    YYY;\n&#125;\nelse &#123;\n    ZZZ;\n&#125;举个例子，如果满足A &#x3D;&#x3D; 10，就输出你好，否则输出大家好\ncA = 10;\nif (A == 10) &#123;\n    printf(&quot;你好&quot;);\n&#125;\nelse &#123;\n    printf(&quot;大家好&quot;);\n&#125;C 语言把任何非零和非空的值假定为true（肯定），把零或null假定为false（否定）\n\n\nwhile循环它的基本语法为\ncwhile(条件) &#123;符合条件时将要循环执行的内容&#125;在程序中如果while中设置的条件是满足的，那么就会进行循环，直到条件不满足时会停止循环，并继续执行while语句之后的代码\nC 语言把任何非零和非空的值假定为true（肯定），把零或null假定为false（否定）\n而while循环的条件若直接为true（肯定）的话就是死循环，除非终止进程，否则它会一直循环下去\n我们在单片机里面目前只需要用到死循环，所以默认使用while的时候为while(1)，while(1) {}将会一直重复大括号里的内容，直到程序进程被强制结束。\n比如我想要程序一直反复输出你好，就可以像这样：\ncwhile(1) &#123;\n    printf(&quot;你好&quot;);\n&#125;\n下面是另外一个编程语言语言中while循环的图示，语法不同，但逻辑都是一样的\n\n这个动图所展示的逻辑是 设a&#x3D;1，当a小于10的时候重复执行输出a的数值再+2\n仔细梳理一下的话还是很好理解的\n\n实例分析下面以4月12号课程中利用开关控制LED行为作为实例\n附上对应的Proteus原理图：\n\nc//以下代码中出现中文仅为了更好理解，Keil中输入中文会显示为问号\n#include &lt;reg52.h&gt;       //这一行的作用是引用头文件，表示以下内容有部分命令来自reg52.h\nsbit LED灯=P1^0;         //使用sbit定义单片机芯片上P1.0针脚为 LED灯 ，定义时仅能为P1^0\nsbit 开关=P3^0;           //使用sbit定义单片机芯片上P3.0针脚为 开关 \n\nvoid main() &#123;            //定义main函数，可以粗略理解为你想要实现的功能从这一句开始\n    while(1) &#123;           //这里使用了一个while循环，让单片机一直重复执行以下命令直到终止\n        if (开关==0) &#123;    //使用if检测开关的电平状态，这里为若为低电平则LED灯得到低电平信号\n            LED灯=0;      //同上\n        &#125;\n        else &#123;            //else指除了上面if指定的 开关==0 情况以外的所有情况\n            LED灯=1;      //指的是当SW为非0时会执行 LED灯=1,意为LED灯得到一个高电平信号\n        &#125;\n    &#125;\n&#125;上述代码中实现的是控制开关闭合或者断开发出高或者低电平来让LED灯获取高或者低电平从而达到利用开关控制LED灯的行为。代码中仅利用开关来控制LED灯的亮或灭的状态，进阶一点的话可以使开关处于闭合状态时，LED灯不停闪烁。\n#include &lt;reg52.h&gt;是通用的，可能之后的每一个程序中都要包含这一句万金油\nsbit是用来定义单片机芯片针脚的，相当于你随便定义一个关键字给某个针脚用来在程序中指定这个针脚\n","slug":"448097c5389b3ecf3581bba55a8a5ad6","date":"2024-04-13T10:50:51.000Z","categories_index":"课程","tags_index":"单片机,C语言","author_index":"Nexaris"},{"id":"c754b75a815e74ddc69143dd4e420a68","title":"单片机Proteus基础内容","content":"本文将根据头一节单片机课程内容梳理Proteus软件的使用方法以及部分注意事项\n打开程序在机房的电脑上打开Proteus的时候需要鼠标右键单击图标，选择以管理员身份运行\n\n如果直接打开软件可能会出现元件列表没有任何选项的情况\n新建项目Proteus主页点击新建工程\n在弹出来的对话框中选择名称和路径，任意位置即可，但要记得住。\n\n\n\n\n\n\nTIP\n推荐在自己的U盘中新建一个文件夹，如单片机，然后根据每一次新建的工程名称创建一个同名文件夹，并选择该路径。   Eg. 路径：F:\\单片机\\单灯闪烁；名称：单灯闪烁.pdsprj\n\n\n路径和名称填写好之后点击下一步\n创建原理图的选项默认应为从选中的模板创建原理图。，并且自动选中的DEFAULT，保持这样点击下一步\nPCB布版设计选择不创建，这也是默认选项\n固件文件同样保持默认\n最后点击完成将会自动跳转到 原理图绘制 界面。\n元件模式刚进入到原理图绘制界面的时候左侧菜单默认为元件模式，点击原理图略缩图下方的P就可以进入选择元器件的界面了\n\n在选择需要的元件之后就可以在左侧菜单中选中它，鼠标光标会变成一支笔的样式，这个时候在原理图上点击就可以开始放置。选择好位置之后，再次单击完成放置。\n\n\n下面列出几个目前课上常用的元件关键字：AT89C51\n类别 Microprocessor ICs &gt; 子类别 8051 Family \n芯片  目前所有课程实例都选用的这个\n\n\n关键字：CAP\n类别 Capacitors &gt; 子类别 Generic\n非极性电容\n\n\n关键字：CAP-ELEC\n类别 Capacitors &gt; 子类别 Generic\n极性电容\n\n\n关键字：RES\n类别 Resistors &gt; 子类别 Generic\n电阻，目前为止貌似只用过这个\n\n\n关键字：CRYSTAL\n类别 Miscellaneous\n晶振 好像是叫这个，听老师念的\n\n\n关键字：SWITCH\n类别 Switches &amp; Relays &gt; 子类别 Switches\n开关\n\n\n关键字：BUTTON\n类别 Switches &amp; Relays &gt; 子类别 Switches\n按钮\n\n\n关键字：LED-RED 或 LED-GREEN\n类别 Optoelectronics &gt; 子类别 LEDs\nLED灯，这里根据关键字选择不同颜色的\n\n\n终端模式终端模式用于放置电源，接地，目前只使用POWER（电源） , GROUND（接地）\n\n\n导入程序往单片机导入编译好的程序文件只需要双击放置好了的板子，在弹出的对话框中设置Program File的路径\n\n","slug":"c754b75a815e74ddc69143dd4e420a68","date":"2024-04-13T05:56:08.000Z","categories_index":"课程","tags_index":"单片机","author_index":"Nexaris"},{"id":"0cf4458af37e18777158807fe15efcc1","title":"首次使用Pipenv","content":"Ubuntu 23.10的情况下使用pip install -r requirements.txt时出现问题\nshell❯ pip3 install -r requirements.txt\nerror: externally-managed-environment\n\n× This environment is externally managed\n╰─&gt; To install Python packages system-wide, try apt install\n    python3-xyz, where xyz is the package you are trying to\n    install.\n    \n    If you wish to install a non-Debian-packaged Python package,\n    create a virtual environment using python3 -m venv path/to/venv.\n    Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make\n    sure you have python3-full installed.\n    \n    If you wish to install a non-Debian packaged Python application,\n    it may be easiest to use pipx install xyz, which will manage a\n    virtual environment for you. Make sure you have pipx installed.\n    \n    See /usr/share/doc/python3.11/README.venv for more information.\n\nnote: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.\nhint: See PEP 668 for the detailed specification.背后的原因目前多个Linux最新的发行版中，正在使用Python包来实现增强功能。\n这个更新是为了避免「操作系统包管理器 (如pacman、yum、apt) 和 pip 等特定于 Python 的包管理工具之间的冲突」。\n更多详情可以在官网查看：\n[Python增强提案]: \n[Python增强提案(PEP)]: https://realpython.com/python-virtual-environments-a-primer/?ref=yaolong.net\t“PEP 668 - Python base environments”\n解决方案使用pipenv\nshellsudo apt install pipenv -yPipenv是官方推荐的python包管理工具，可以实现项目之间依赖的隔离。\n虚拟环境简单来讲，虚拟环境就是隔离你项目中安装的库的一个环境。想象一下，如果想在当前电脑中做几个需要不同依赖以及不同的库的项目，而其中要求了不同版本的同一依赖，直接安装的话可能会带来意想不到的麻烦。因此，通常我们会为每一个项目都创建一个虚拟环境，以此来隔离各个项目的工作环境。\n创建虚拟环境创建自己的项目目录，在该目录下使用命令pipenv install可以创建一个虚拟的环境。默认为当前全局环境中已有的Python版本\n如果想指定创建的虚拟环境的Python版本，可以使用以下命令：\nshellpipenv --python 3.6   #指定使用Python3.6的虚拟环境\npipenv --two          #使用系统的Python2来创建虚拟环境\npipenv --three\t\t  #使用系统的Python3来创建虚拟环境\n\n#注意：以上三个参数只能单独使用。它们还具有破坏性，会删除当前的虚拟环境，然后用适当版本的虚拟环境替代当给定了一个Python版本的时候，Pipenv会自动扫描系统中能够匹配给定的Pyhton版本的Python解释器，没制定版本时，使用系统默认的Python版本。\n执行完命令，项目文件夹会生成两个文件，Pipfile``和Pipfile.lock。如果命令执行前项目目录中不存在Pipfile文件，该命令将会创建一个Pipfile文件。如果已经有Pipfile，存在则会根据这个Pipfile生成虚拟环境。\nPipfile内容解析打开Pipfile文件，可以看到如下内容：\ntoml[[source]]\nurl = &quot;https://pypi.org/simple&quot;\nverify_ssl = true\nname = &quot;pypi&quot;\n\n[packages]\njsbeautifier = &quot;==1.14.0&quot;\njsmin = &quot;==3.0.0&quot;\nloguru = &quot;==0.5.3&quot;\npycryptodome = &quot;==3.11.0&quot;\n\n[dev-packages]\n\n[requires]\npython_version = &quot;3.11&quot;\nsource 用来设置仓库地址，即从哪下载虚拟环境所需要的包\npackages用来制定项目依赖的包，即你安装了的想要引用到虚拟环境的包\ndev-packages用来指定开发环境需要的包，这类包只用于开发过程，不用于生产环境，比如单元测试相关的包，只在开发阶段有用，这样分开便于管理\nrequires中制定目标Python版本\n\nPipfile.lock文件\nPipfile.lock中记录了当前虚拟环境中安装的依赖的版本号以及哈希，以保证被次根据这些值出来的依赖都是一致的，该文件用来保证包的完整性。记住，任何情况下都不要手动修改该文件！\n项目提交时，可将Pipfile文件和Pipfile.lock一并提交，给其他开发人员克隆下载，他们可以根据此Pipfile文件运行命令pipenv install生成自己的虚拟环境。\n\n","slug":"0cf4458af37e18777158807fe15efcc1","date":"2024-04-13T05:37:44.113Z","categories_index":"Linux","tags_index":"Linux,Python","author_index":"Nexaris"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new postbash$ hexo new &quot;My New Post&quot;More info: Writing\nRun serverbash$ hexo serverMore info: Server\nGenerate static filesbash$ hexo generateMore info: Generating\nDeploy to remote sitesbash$ hexo deployMore info: Deployment\nThis is a spoiler test\n","slug":"b9663f58f18133b35bfe243f3e916a80","date":"2024-04-12T13:36:07.160Z","categories_index":"","tags_index":"","author_index":"Nexaris"}]